apiVersion: apps/v1
kind: Deployment
metadata:
  name: history-scanner
  namespace: stellaratlas
  labels:
    app.kubernetes.io/name: history-scanner
    app.kubernetes.io/component: scanner
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: history-scanner
      app.kubernetes.io/component: scanner
  template:
    metadata:
      labels:
        app.kubernetes.io/name: history-scanner
        app.kubernetes.io/component: scanner
    spec:
      containers:
      - name: history-scanner
        image: stellaratlas/history-scanner:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: stellaratlas-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: stellaratlas-config
              key: LOG_LEVEL
        - name: HISTORY_SCANNER_PORT
          valueFrom:
            configMapKeyRef:
              name: stellaratlas-config
              key: HISTORY_SCANNER_PORT
        - name: SCAN_INTERVAL
          valueFrom:
            configMapKeyRef:
              name: stellaratlas-config
              key: SCAN_INTERVAL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: stellaratlas-secrets
              key: DATABASE_URL
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3001
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      initContainers:
      - name: wait-for-postgres
        image: postgres:16-alpine
        command:
        - sh
        - -c
        - |
          until pg_isready -h postgres-service -p 5432 -U stellaratlas_user; do
            echo "Waiting for postgres..."
            sleep 2
          done
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: history-scanner-service
  namespace: stellaratlas
  labels:
    app.kubernetes.io/name: history-scanner
    app.kubernetes.io/component: scanner
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: history-scanner
    app.kubernetes.io/component: scanner